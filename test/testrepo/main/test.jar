import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class DestinationHashGenerator {

    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java -jar DestinationHashGenerator.jar <roll_number> <json_file_path>");
            return;
        }

        String rollNumber = args[0].toLowerCase().replace(" ", "");
        String jsonFilePath = args[1];

        try {
            // Step 1: Parse JSON file
            File jsonFile = new File(jsonFilePath);
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(jsonFile);

            // Step 2: Find the value of the first "destination" key
            String destinationValue = findDestinationValue(rootNode);
            if (destinationValue == null) {
                System.out.println("Key 'destination' not found in the JSON file.");
                return;
            }

            // Step 3: Generate random 8-character alphanumeric string
            String randomString = generateRandomString(8);

            // Step 4: Concatenate values and compute MD5 hash
            String input = rollNumber + destinationValue + randomString;
            String hash = generateMD5Hash(input);

            // Step 5: Print output
            System.out.println(hash + ";" + randomString);

        } catch (IOException e) {
            System.err.println("Error reading JSON file: " + e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error generating MD5 hash: " + e.getMessage());
        }
    }

    private static String findDestinationValue(JsonNode node) {
        if (node.isObject()) {
            for (var entry : node.fields()) {
                if ("destination".equals(entry.getKey())) {
                    return entry.getValue().asText();
                }
                String result = findDestinationValue(entry.getValue());
                if (result != null) return result;
            }
        } else if (node.isArray()) {
            for (JsonNode item : node) {
                String result = findDestinationValue(item);
                if (result != null) return result;
            }
        }
        return null;
    }

    private static String generateRandomString(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }
        return sb.toString();
    }

    private static String generateMD5Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] digest = md.digest(input.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : digest) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}